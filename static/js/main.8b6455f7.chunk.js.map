{"version":3,"sources":["constants/routes.ts","api/index.ts","redux/actions/users.ts","redux/actions/usersTypes.ts","components/ListHeader.tsx","components/ListUsers.tsx","components/FormField.tsx","redux/actions/auth.ts","redux/actions/authTypes.ts","components/Auth.tsx","components/FormAddUser.tsx","components/PrivateRoute.tsx","App.tsx","serviceWorker.ts","redux/reducers/auth.ts","redux/reducers/users.ts","redux/reducers/rootReducer.ts","redux/store.ts","index.tsx"],"names":["routes","config","baseURL","responseType","headers","apiClient","usernameApi","passwordApi","fetchTokenApi","values","a","username","password","dataUser","JSON","stringify","post","res","data","fetchUsersApi","token","get","Authorization","addUserApi","firstName","lastName","isActive","first_name","last_name","is_active","deleteUserApi","idUser","delete","this","axios","create","fetchUsers","dispatch","type","payload","isLoading","question","users","Title","styled","h2","Header","div","ListHeader","props","to","Wrapper","ItemText","Typography","Text","ListUsers","useDispatch","useSelector","state","reducerAuth","reducerUsers","React","useEffect","handleDeleteUser","id","queries","orientation","header","bordered","dataSource","renderItem","user","Item","DeleteOutlined","onClick","Input","Field","FormField","name","placeholder","msg","style","color","fetchToken","FormAuth","Form","BtnSubmit","shema","yup","shape","required","Auth","history","useHistory","initialValues","validationSchema","onSubmit","push","message","error","handleSubmit","value","FormS","WrapperIsActive","TitleIsActive","p","matches","FormAddUser","PrivateRoute","component","rest","isAuth","render","createElement","pathname","App","path","exact","Boolean","window","location","hostname","match","initState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"wQAIaA,EACJ,gCADIA,EAEL,oCAFKA,EAGF,uC,iGCDLC,EAA6B,CACjCC,QAH6B,iDAI7BC,aAAc,OACdC,QAAS,CACP,eAAgB,qBAiEL,MAtDb,aAAe,IAAD,gCANdC,eAMc,OAJdC,iBAIc,OAFdC,iBAEc,OAMdC,cANc,uCAME,WAAOC,GAAP,qBAAAC,EAAA,6DACNC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACZC,EAAWC,KAAKC,UAAU,CAC9BJ,WACAC,aAJY,SAMI,EAAKP,UAAUW,KAAK,mBAAoBH,GAN5C,cAMRI,EANQ,yBAOPA,EAAIC,MAPG,2CANF,2DAgBdC,cAhBc,uCAgBE,WAAOC,GAAP,eAAAV,EAAA,sEACI,EAAKL,UAAUgB,IAAI,iBAAkB,CACrDjB,QAAS,CACPkB,cAAc,SAAD,OAAWF,MAHd,cACRH,EADQ,yBAMPA,EAAIC,MANG,2CAhBF,2DAyBdK,WAzBc,uCAyBD,WAAOH,EAAeX,GAAtB,2BAAAC,EAAA,6DAETC,EACEF,EADFE,SAAUC,EACRH,EADQG,SAAUY,EAClBf,EADkBe,UAAWC,EAC7BhB,EAD6BgB,SAAUC,EACvCjB,EADuCiB,SAErCR,EAAOJ,KAAKC,UAAU,CAC1BJ,WACAC,WACAe,WAAYH,EACZI,UAAWH,EACXI,UAAWH,IATF,SAWO,EAAKrB,UAAUW,KAAK,iBAAkBE,EAAM,CAC5Dd,QAAS,CACPkB,cAAc,SAAD,OAAWF,MAbjB,cAWLH,EAXK,yBAgBJA,EAAIC,MAhBA,2CAzBC,6DA4CdY,cA5Cc,uCA4CE,WAAOV,EAAeW,GAAtB,eAAArB,EAAA,sEACI,EAAKL,UAAU2B,OAAf,wBAAuCD,GAAU,CACjE3B,QAAS,CACPkB,cAAc,SAAD,OAAWF,MAHd,cACRH,EADQ,yBAMPA,EAAIC,MANG,2CA5CF,wDACZe,KAAK3B,YAAc,aACnB2B,KAAK1B,YAAc,mBACnB0B,KAAK5B,UAAY6B,IAAMC,OAAOlC,ICfrBmC,EAAa,SAAChB,GAAD,8CAAmB,WAC3CiB,GAD2C,eAAA3B,EAAA,sEAIzC2B,EAAS,CACPC,KCduB,gBDevBC,QAAS,CACPC,WAAW,KAP0B,SAUvBC,EAAStB,cAAcC,GAVA,OAUnCH,EAVmC,OAWzCoB,EAAS,CACPC,KCpBuB,gBDqBvBC,QAAS,CACPG,MAAOzB,EACPuB,WAAW,KAf0B,gDAmBzCH,EAAS,CACPC,KC3BuB,gBD4BvBC,QAAS,CACPC,WAAW,KAtB0B,yDAAnB,uD,yOEH1B,IAAMG,EAAQC,IAAOC,GAAV,KAGLC,EAASF,IAAOG,IAAV,KAeGC,EAPI,SAACC,GAAD,OACjB,kBAACH,EAAD,KACE,kBAACH,EAAD,oBACA,kBAAC,IAAD,CAAMO,GAAIlD,GAAV,+H,yMCTJ,IAAMmD,EAAUP,IAAOG,IAAV,KAIPK,EAAWR,YAAOS,IAAWC,KAAlBV,CAAH,KAmDCW,EA7CG,SAACN,GACjB,IAAMZ,EAAWmB,cACTpC,EAAUqC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,eAAlDvC,MAF0B,EAGLqC,aAC3B,SAACC,GAAD,OAAsBA,EAAME,gBADtBlB,EAH0B,EAG1BA,MAAOF,EAHmB,EAGnBA,UAIfqB,IAAMC,WAAU,WACdzB,EAASD,EAAWhB,MACnB,IAEH,IAAM2C,EAAgB,uCAAG,WAAOC,GAAP,SAAAtD,EAAA,sEACjBuD,EAAQnC,cAAcV,EAAQ4C,GADb,uBAEjB3B,EAASD,EAAWhB,IAFH,2CAAH,sDAKtB,OACE,oCACGoB,EACC,kBAAC,IAAD,MAEA,kBAACW,EAAD,KACE,kBAAC,IAAD,CAASe,YAAY,QAArB,cACA,kBAAC,IAAD,CACEC,OAAQ,kBAAC,EAAD,MACRC,UAAQ,EACRC,WAAY3B,EACZ4B,WAAY,SAACC,GAAD,OACV,kBAAC,IAAKC,KAAN,KACE,6BACE,kBAACpB,EAAD,KAAWmB,EAAKP,IAChB,kBAACZ,EAAD,KAAWmB,EAAK5D,WAElB,6BACE,kBAAC8D,EAAA,EAAD,CAAgBC,QAAS,kBAAMX,EAAiBQ,EAAKP,e,wPCnDvE,IAAMW,EAAQ/B,YAAOgC,IAAPhC,CAAH,KA0BIiC,EATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMxC,EAAT,EAASA,KAAT,OAChB,oCACE,kBAACqC,EAAD,CAAOG,KAAMA,EAAMxC,KAAMA,EAAMyC,YAAW,gBAAWD,EAAX,SAC1C,kBAAC,IAAD,CAAcA,KAAMA,IACjB,SAACE,GAAD,OAAS,0BAAMC,MAAO,CAAEC,MAAO,QAAUF,QCfnCG,EAAa,SAAC1E,GAAD,8CAAuB,WAC/C4B,GAD+C,eAAA3B,EAAA,sEAI7C2B,EAAS,CACPC,KCfuB,kBDUoB,SAO3BG,EAASjC,cAAcC,GAPI,OAOvCQ,EAPuC,OAQ7CoB,EAAS,CACPC,KClBuB,gBDmBvBC,QAAStB,EAAIG,QAV8B,sDAa7CiB,EAAS,CACPC,KCtBuB,kBDQoB,8DAAvB,uD,goBEE1B,IAAMa,EAAUP,IAAOG,IAAV,KAOPqC,EAAWxC,YAAOyC,IAAPzC,CAAH,KASR0C,EAAY1C,YAAOgC,IAAPhC,CAAH,KAeT2C,EAAQC,MAAaC,MAAM,CAC/B9E,SAAU6E,MAAaE,SAAS,kBAChC9E,SAAU4E,MAAaE,SAAS,oBAmCnBC,EAhCF,SAAC1C,GACZ,IAAMZ,EAAWmB,cACXoC,EAAUC,cAChB,OACE,kBAAC,IAAD,CACEC,cAAe,CACbnF,SAAU,aACVC,SAAU,oBAEZmF,iBAAkBR,EAClBS,SAAQ,uCAAE,WAAOvF,GAAP,SAAAC,EAAA,+EAEA2B,EAAS8C,EAAW1E,IAFpB,uBAGAmF,EAAQK,KAAKjG,GAHb,uDAKNkG,IAAQC,MAAM,uKALR,yDAAF,wDASP,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAC,EAAD,KACE,kBAAChB,EAAD,CAAUY,SAAUI,GAClB,kBAAC,EAAD,CAAWtB,KAAK,WAAWxC,KAAK,SAChC,kBAAC,EAAD,CAAWwC,KAAK,WAAWxC,KAAK,aAChC,kBAACgD,EAAD,CAAWhD,KAAK,SAAS+D,MAAM,iB,w9BC3D3C,IAAMlD,GAAUP,IAAOG,IAAV,MAOPuD,GAAQ1D,YAAOyC,IAAPzC,CAAH,MASL0C,GAAY1C,YAAOgC,IAAPhC,CAAH,MAYT2D,GAAkB3D,IAAOG,IAAV,MAUfyD,GAAgB5D,IAAO6D,EAAV,MAMblB,GAAQC,MAAaC,MAAM,CAC/B9E,SAAU6E,MAAaE,SAAS,kBAChC9E,SAAU4E,MAEPE,SAAS,kBACTgB,QACC,iDACA,4HAEJ/E,WAAY6D,MACZ5D,UAAW4D,MACX3D,UAAW2D,QA4CEmB,GAzCK,SAAC1D,GAAkB,IAC7B7B,EAAUqC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,eAAlDvC,MACFwE,EAAUC,cAChB,OACE,kBAAC,IAAD,CACEC,cAAe,CACbnF,SAAU,GACVC,SAAU,GACVY,UAAW,GACXC,SAAU,GACVC,UAAU,GAEZqE,iBAAkBR,GAClBS,SAAQ,uCAAE,WAAOvF,GAAP,SAAAC,EAAA,+EAEAuD,EAAQ1C,WAAWH,EAAQX,GAF3B,uBAGAmF,EAAQK,KAAKjG,GAHb,uDAKNkG,IAAQC,MAAM,uOALR,yDAAF,wDASP,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAC,GAAD,KACE,kBAACE,GAAD,CAAON,SAAUI,GACf,kBAAC,EAAD,CAAWtB,KAAK,WAAWxC,KAAK,SAChC,kBAAC,EAAD,CAAWwC,KAAK,WAAWxC,KAAK,aAChC,kBAAC,EAAD,CAAWwC,KAAK,YAAYxC,KAAK,SACjC,kBAAC,EAAD,CAAWwC,KAAK,WAAWxC,KAAK,SAChC,kBAACiE,GAAD,KACE,kBAACC,GAAD,mBACA,kBAAC,EAAD,CAAW1B,KAAK,WAAWxC,KAAK,cAElC,kBAAC,GAAD,CAAWA,KAAK,SAAS+D,MAAM,oB,UCvF5BO,GAVM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAcC,EAAgB,8BAC5CC,EAAWtD,aAAY,SAACC,GAAD,OAAsBA,EAAMC,eAAnDoD,OAMR,OAAO,kBAAC,IAAD,iBAAWD,EAAX,CAAiBE,OALD,SAAC/D,GAAD,OAAiB8D,EACtClD,IAAMoD,cAAcJ,EAAW5D,GAE/B,kBAAC,IAAD,CAAUC,GAAI,CAAEgE,SAAUlH,U,yQCH9B,IAAMmD,GAAUP,IAAOG,IAAV,MAuBEoE,GAXH,kBACV,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAMpH,EAAa6G,UAAWlB,IACrC,kBAAC,GAAD,CAAcyB,KAAMpH,EAAcqH,OAAK,EAACR,UAAWtD,IACnD,kBAAC,GAAD,CAAc6D,KAAMpH,EAAgB6G,UAAWF,KAC/C,kBAAC,IAAD,CAAUzD,GAAI,CAAEgE,SAAUlH,QCfZsH,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,iCCLAC,GAAwB,CAC5BnF,WAAW,EACXpB,MAAO,KACP2F,QAAQ,G,SCRJY,GAAyB,CAC7BjF,MAAO,GACPF,WAAW,GCNAoF,GAAcC,2BAAgB,CAAElE,YFelB,WAGT,IAFhBD,EAEe,uDAFKiE,GACpBG,EACe,uCACf,OAAQA,EAAOxF,MACb,INxByB,gBMyBvB,MAAO,CAAEE,WAAW,EAAMuE,QAAQ,GACpC,INzByB,gBM0BvB,MAAO,CACLvE,WAAW,EACXpB,MAAO0G,EAAOvF,QACdwE,QAAQ,GAEZ,IN9ByB,gBM+BvB,MAAO,CAAEvE,WAAW,EAAOuE,QAAQ,GACrC,QACE,OAAOrD,IE/B6CE,aDS9B,WAGT,IAFjBF,EAEgB,uDAFKiE,GACrBG,EACgB,uCAChB,OAAQA,EAAOxF,MACb,IZlByB,gBYmBvB,OAAO,6BACFoB,GADL,IAEElB,UAAWsF,EAAOvF,QAAQC,YAE9B,IZtByB,gBYuBvB,OAAO,6BACFkB,GADL,IAEEhB,MAAOoF,EAAOvF,QAAQG,MACtBF,UAAWsF,EAAOvF,QAAQC,YAE9B,IZ3ByB,gBY4BvB,OAAO,6BACFkB,GADL,IAEElB,UAAWsF,EAAOvF,QAAQC,YAE9B,QACE,OAAOkB,ME7BAqE,GAAQC,uBACnBJ,GACAK,+BAAoBC,2BAAgBC,QCGtCC,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,SAINO,SAASC,eAAe,SLwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC3C,GACN4C,QAAQ5C,MAAMA,EAAMD,c","file":"static/js/main.8b6455f7.chunk.js","sourcesContent":["interface routesI {\r\n  [routesName: string]: string;\r\n}\r\n\r\nexport const routes: routesI = {\r\n  users: '/typescript-redux-formik-api/',\r\n  auth: '/typescript-redux-formik-api/auth',\r\n  addUser: '/typescript-redux-formik-api/addUser',\r\n};\r\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport { authDataT } from '../redux/actions/authTypes';\r\nimport { userRequiredT } from '../redux/actions/usersTypes';\r\n\r\nconst API_SERVER_URL: string = 'http://emphasoft-test-assignment.herokuapp.com';\r\n\r\nconst config: AxiosRequestConfig = {\r\n  baseURL: API_SERVER_URL,\r\n  responseType: 'json',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n};\r\n\r\nclass Question {\r\n  apiClient: AxiosInstance;\r\n\r\n  usernameApi: string;\r\n\r\n  passwordApi: string;\r\n\r\n  constructor() {\r\n    this.usernameApi = 'test_super';\r\n    this.passwordApi = 'Nf<U4f<rDbtDxAPn';\r\n    this.apiClient = axios.create(config);\r\n  }\r\n\r\n  fetchTokenApi = async (values: authDataT) => {\r\n    const { username, password } = values;\r\n    const dataUser = JSON.stringify({\r\n      username,\r\n      password,\r\n    });\r\n    const res = await this.apiClient.post('/api-token-auth/', dataUser);\r\n    return res.data;\r\n  };\r\n\r\n  fetchUsersApi = async (token: string) => {\r\n    const res = await this.apiClient.get('/api/v1/users/', {\r\n      headers: {\r\n        Authorization: `Token ${token}`,\r\n      },\r\n    });\r\n    return res.data;\r\n  };\r\n\r\n  addUserApi = async (token: string, values: userRequiredT) => {\r\n    const {\r\n      username, password, firstName, lastName, isActive,\r\n    } = values;\r\n    const data = JSON.stringify({\r\n      username,\r\n      password,\r\n      first_name: firstName,\r\n      last_name: lastName,\r\n      is_active: isActive,\r\n    });\r\n    const res = await this.apiClient.post('/api/v1/users/', data, {\r\n      headers: {\r\n        Authorization: `Token ${token}`,\r\n      },\r\n    });\r\n    return res.data;\r\n  };\r\n\r\n  deleteUserApi = async (token: string, idUser: number) => {\r\n    const res = await this.apiClient.delete(`/api/v1/users/${idUser}`, {\r\n      headers: {\r\n        Authorization: `Token ${token}`,\r\n      },\r\n    });\r\n    return res.data;\r\n  };\r\n}\r\n\r\nexport default new Question();\r\n","import { Dispatch } from 'redux';\r\nimport question from '../../api/index';\r\nimport {\r\n  UsersDispatchTypes,\r\n  USERS_LOADING,\r\n  USERS_SUCCESS,\r\n  USERS_FAILURE,\r\n} from './usersTypes';\r\n\r\nexport const fetchUsers = (token: string) => async (\r\n  dispatch: Dispatch<UsersDispatchTypes>,\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: USERS_LOADING,\r\n      payload: {\r\n        isLoading: true,\r\n      },\r\n    });\r\n    const res = await question.fetchUsersApi(token);\r\n    dispatch({\r\n      type: USERS_SUCCESS,\r\n      payload: {\r\n        users: res,\r\n        isLoading: false,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: USERS_FAILURE,\r\n      payload: {\r\n        isLoading: false,\r\n      },\r\n    });\r\n  }\r\n};\r\n","export const USERS_LOADING = 'USERS_LOADING';\r\nexport const USERS_SUCCESS = 'USERS_SUCCESS';\r\nexport const USERS_FAILURE = 'USERS_FAILURE';\r\n\r\nexport type userT = {\r\n  id: number;\r\n  username: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  isActive: boolean;\r\n  lastLogin?: string;\r\n  isSuperuser?: boolean;\r\n};\r\n\r\nexport type userRequiredT = {\r\n  username: string;\r\n  password: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  isActive: boolean;\r\n  lastLogin?: string;\r\n  isSuperuser?: boolean;\r\n};\r\n\r\nexport type usersStateT = {\r\n  users: Array<userT>;\r\n  isLoading: boolean;\r\n};\r\n\r\nexport interface UsersLoading {\r\n  type: typeof USERS_LOADING;\r\n  payload: {\r\n    isLoading: boolean;\r\n  };\r\n}\r\nexport interface UsersSuccess {\r\n  type: typeof USERS_SUCCESS;\r\n  payload: {\r\n    users: Array<userT>;\r\n    isLoading: boolean;\r\n  };\r\n}\r\nexport interface UsersFailure {\r\n  type: typeof USERS_FAILURE;\r\n  payload: {\r\n    isLoading: boolean;\r\n  };\r\n}\r\n\r\nexport type UsersDispatchTypes = UsersLoading | UsersSuccess | UsersFailure;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { routes } from '../constants/routes';\r\n\r\nconst Title = styled.h2`\r\n  margin: 0;\r\n`;\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\ninterface Props {}\r\n\r\nconst ListHeader = (props: Props) => (\r\n  <Header>\r\n    <Title>id/username</Title>\r\n    <Link to={routes.addUser}>Добавить пользователя</Link>\r\n  </Header>\r\n);\r\n\r\nexport default ListHeader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { Divider, List, Typography, Spin } from 'antd';\r\nimport queries from '../api/index';\r\nimport { RootStore } from '../redux/store';\r\nimport { fetchUsers } from '../redux/actions/users';\r\nimport ListHeader from './ListHeader';\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 600px;\r\n  width: 100%;\r\n`;\r\nconst ItemText = styled(Typography.Text)`\r\n  margin-right: 8px;\r\n`;\r\n\r\ninterface Props {}\r\n\r\nconst ListUsers = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n  const { token } = useSelector((state: RootStore) => state.reducerAuth);\r\n  const { users, isLoading } = useSelector(\r\n    (state: RootStore) => state.reducerUsers\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchUsers(token!));\r\n  }, []);\r\n\r\n  const handleDeleteUser = async (id: number) => {\r\n    await queries.deleteUserApi(token!, id);\r\n    await dispatch(fetchUsers(token!));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Spin />\r\n      ) : (\r\n        <Wrapper>\r\n          <Divider orientation=\"left\">List users</Divider>\r\n          <List\r\n            header={<ListHeader />}\r\n            bordered\r\n            dataSource={users}\r\n            renderItem={(user: any) => (\r\n              <List.Item>\r\n                <div>\r\n                  <ItemText>{user.id}</ItemText>\r\n                  <ItemText>{user.username}</ItemText>\r\n                </div>\r\n                <div>\r\n                  <DeleteOutlined onClick={() => handleDeleteUser(user.id)} />\r\n                </div>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Wrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListUsers;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nconst Input = styled(Field)`\r\n  padding: 8px 0;\r\n  border: none;\r\n  border-bottom: 1px solid #000;\r\n  background: none;\r\n  font-weight: 700;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\nconst FormField = ({ name, type }: Props) => (\r\n  <>\r\n    <Input name={name} type={type} placeholder={`Enter ${name}...`} />\r\n    <ErrorMessage name={name}>\r\n      {(msg) => <span style={{ color: 'red' }}>{msg}</span>}\r\n    </ErrorMessage>\r\n  </>\r\n);\r\n\r\nexport default FormField;\r\n","import { Dispatch } from 'redux';\r\nimport question from '../../api/index';\r\nimport {\r\n  TokenDispatchTypes,\r\n  authDataT,\r\n  TOKEN_LOADING,\r\n  TOKEN_SUCCESS,\r\n  TOKEN_FAILURE,\r\n} from './authTypes';\r\n\r\nexport const fetchToken = (values: authDataT) => async (\r\n  dispatch: Dispatch<TokenDispatchTypes>,\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: TOKEN_LOADING,\r\n    });\r\n    const res = await question.fetchTokenApi(values);\r\n    dispatch({\r\n      type: TOKEN_SUCCESS,\r\n      payload: res.token,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TOKEN_FAILURE,\r\n    });\r\n    throw err;\r\n  }\r\n};\r\n","export const TOKEN_LOADING = 'TOKEN_LOADING';\r\nexport const TOKEN_SUCCESS = 'TOKEN_SUCCESS';\r\nexport const TOKEN_FAILURE = 'TOKEN_FAILURE';\r\n\r\nexport type Ttoken = {\r\n  token: string | null;\r\n};\r\n\r\nexport type authDataT = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nexport interface TokenLoading {\r\n  type: typeof TOKEN_LOADING;\r\n}\r\nexport interface TokenSuccess {\r\n  type: typeof TOKEN_SUCCESS;\r\n  payload: string | null;\r\n}\r\nexport interface TokenFailure {\r\n  type: typeof TOKEN_FAILURE;\r\n}\r\n\r\nexport type TokenDispatchTypes = TokenLoading | TokenSuccess | TokenFailure;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { message } from 'antd';\r\nimport FormField from './FormField';\r\nimport { routes } from '../constants/routes';\r\nimport { fetchToken } from '../redux/actions/auth';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst FormAuth = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  & *:not(:last-child) {\r\n    margin-bottom: 2px;\r\n  }\r\n`;\r\nconst BtnSubmit = styled(Field)`\r\n  padding: 4px;\r\n  margin-top: 8px;\r\n  border: none;\r\n  background: none;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\ninterface Props {}\r\n\r\nconst shema = yup.object().shape({\r\n  username: yup.string().required('Enter username'),\r\n  password: yup.string().required('Enter password'),\r\n});\r\n\r\nconst Auth = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        username: 'test_super',\r\n        password: 'Nf<U4f<rDbtDxAPn',\r\n      }}\r\n      validationSchema={shema}\r\n      onSubmit={async (values) => {\r\n        try {\r\n          await dispatch(fetchToken(values));\r\n          await history.push(routes.users);\r\n        } catch (err) {\r\n          message.error('Не правильный логин или пароль...');\r\n        }\r\n      }}\r\n    >\r\n      {({ handleSubmit }) => (\r\n        <Wrapper>\r\n          <FormAuth onSubmit={handleSubmit}>\r\n            <FormField name=\"username\" type=\"text\" />\r\n            <FormField name=\"password\" type=\"password\" />\r\n            <BtnSubmit type=\"submit\" value=\"Submit\" />\r\n          </FormAuth>\r\n        </Wrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { message } from 'antd';\r\nimport { RootStore } from '../redux/store';\r\nimport FormField from './FormField';\r\nimport { routes } from '../constants/routes';\r\nimport queries from '../api/index';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst FormS = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  & *:not(:last-child) {\r\n    margin-bottom: 2px;\r\n  }\r\n`;\r\nconst BtnSubmit = styled(Field)`\r\n  padding: 4px;\r\n  margin-top: 8px;\r\n  border: none;\r\n  background: none;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst WrapperIsActive = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  border: none;\r\n  border-bottom: 1px solid #000;\r\n  background: none;\r\n  font-weight: 700;\r\n  width: 100%;\r\n`;\r\nconst TitleIsActive = styled.p`\r\n  margin: 0 8px 0 0;\r\n`;\r\n\r\ninterface Props {}\r\n\r\nconst shema = yup.object().shape({\r\n  username: yup.string().required('Enter username'),\r\n  password: yup\r\n    .string()\r\n    .required('Enter password')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\r\n      '8+ букв, 1 заглавная, 1 цифра.',\r\n    ),\r\n  first_name: yup.string(),\r\n  last_name: yup.string(),\r\n  is_active: yup.boolean(),\r\n});\r\n\r\nconst FormAddUser = (props: Props) => {\r\n  const { token } = useSelector((state: RootStore) => state.reducerAuth);\r\n  const history = useHistory();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        username: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        isActive: false,\r\n      }}\r\n      validationSchema={shema}\r\n      onSubmit={async (values) => {\r\n        try {\r\n          await queries.addUserApi(token!, values);\r\n          await history.push(routes.users);\r\n        } catch (err) {\r\n          message.error('Пользователь с таким именем уже существует');\r\n        }\r\n      }}\r\n    >\r\n      {({ handleSubmit }) => (\r\n        <Wrapper>\r\n          <FormS onSubmit={handleSubmit}>\r\n            <FormField name=\"username\" type=\"text\" />\r\n            <FormField name=\"password\" type=\"password\" />\r\n            <FormField name=\"firstName\" type=\"text\" />\r\n            <FormField name=\"lastName\" type=\"text\" />\r\n            <WrapperIsActive>\r\n              <TitleIsActive>is Active?</TitleIsActive>\r\n              <FormField name=\"isActive\" type=\"checkbox\" />\r\n            </WrapperIsActive>\r\n            <BtnSubmit type=\"submit\" value=\"Send user\" />\r\n          </FormS>\r\n        </Wrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormAddUser;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { RootStore } from '../redux/store';\r\nimport { routes } from '../constants/routes';\r\n\r\nconst PrivateRoute = ({ component, ...rest }: any) => {\r\n  const { isAuth } = useSelector((state: RootStore) => state.reducerAuth);\r\n  const routeComponent = (props: any) => (isAuth ? (\r\n    React.createElement(component, props)\r\n  ) : (\r\n    <Redirect to={{ pathname: routes.auth }} />\r\n  ));\r\n  return <Route {...rest} render={routeComponent} />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { routes } from './constants/routes';\r\nimport ListUsers from './components/ListUsers';\r\nimport Auth from './components/Auth';\r\nimport FormAddUser from './components/FormAddUser';\r\nimport PrivateRoute from './components/PrivateRoute';\r\n\r\nconst Wrapper = styled.div`\r\n  min-width: 100vw;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst App = () => (\r\n  <Wrapper>\r\n    <Switch>\r\n      <Route path={routes.auth} component={Auth} />\r\n      <PrivateRoute path={routes.users} exact component={ListUsers} />\r\n      <PrivateRoute path={routes.addUser} component={FormAddUser} />\r\n      <Redirect to={{ pathname: routes.auth }} />\r\n    </Switch>\r\n  </Wrapper>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  TokenDispatchTypes,\r\n  TOKEN_LOADING,\r\n  TOKEN_SUCCESS,\r\n  TOKEN_FAILURE,\r\n} from '../actions/authTypes';\r\n\r\ninterface initStateI {\r\n  isLoading: boolean;\r\n  token?: string | null;\r\n  isAuth: boolean;\r\n}\r\n\r\nconst initState: initStateI = {\r\n  isLoading: false,\r\n  token: null,\r\n  isAuth: false,\r\n};\r\n\r\nexport const reducerAuth = (\r\n  state: initStateI = initState,\r\n  action: TokenDispatchTypes,\r\n): initStateI => {\r\n  switch (action.type) {\r\n    case TOKEN_LOADING:\r\n      return { isLoading: true, isAuth: false };\r\n    case TOKEN_SUCCESS:\r\n      return {\r\n        isLoading: false,\r\n        token: action.payload,\r\n        isAuth: true,\r\n      };\r\n    case TOKEN_FAILURE:\r\n      return { isLoading: false, isAuth: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  UsersDispatchTypes,\r\n  usersStateT,\r\n  USERS_LOADING,\r\n  USERS_SUCCESS,\r\n  USERS_FAILURE,\r\n} from '../actions/usersTypes';\r\n\r\nconst initState: usersStateT = {\r\n  users: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const reducerUsers = (\r\n  state: usersStateT = initState,\r\n  action: UsersDispatchTypes,\r\n): usersStateT => {\r\n  switch (action.type) {\r\n    case USERS_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload.isLoading,\r\n      };\r\n    case USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        users: action.payload.users,\r\n        isLoading: action.payload.isLoading,\r\n      };\r\n    case USERS_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload.isLoading,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { reducerAuth } from './auth';\r\nimport { reducerUsers } from './users';\r\n\r\nexport const rootReducer = combineReducers({ reducerAuth, reducerUsers });\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { rootReducer } from './reducers/rootReducer';\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport type RootStore = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}